// Generated by CoffeeScript 1.12.4
var css, fs, path, renderSass, sass;

jest.autoMockOff();

fs = require('fs');

path = require('path');

sass = require('node-sass');

css = require('css');

renderSass = function(sass_source) {
  var output, parsed;
  output = sass.renderSync({
    data: "@import \"proof\"\n\n" + sass_source,
    indentedSyntax: true,
    includePaths: [path.join(__dirname, '..')]
  });
  parsed = css.parse(output.css.toString());
  return parsed;
};

describe('layout', function() {
  return describe('gutter-all', function() {
    it('should use padding by default', function() {
      var parsed;
      parsed = renderSass(".Foo\n    +gutter-all");
      parsed.stylesheet.rules[0].declarations.forEach(function(declaration) {
        expect(declaration.property.split('-')[0]).toEqual('padding');
        return expect(declaration.value).toEqual('14px');
      });
      return parsed.stylesheet.rules.slice(1).forEach(function(mq_rule) {
        expect(mq_rule.rules[0].declarations[0].property.split('-')[0]).toEqual('padding');
        return expect(mq_rule.rules[0].declarations[0].value).toEqual('28px');
      });
    });
    it('should apply multiplier to default values', function() {
      var parsed;
      parsed = renderSass(".Foo\n    +gutter-all(2)");
      parsed.stylesheet.rules[0].declarations.forEach(function(declaration) {
        return expect(declaration.value).toEqual('28px');
      });
      return parsed.stylesheet.rules.slice(1).forEach(function(mq_rule) {
        return expect(mq_rule.rules[0].declarations[0].value).toEqual('56px');
      });
    });
    it('should support using margin', function() {
      var parsed;
      parsed = renderSass(".Foo\n    +gutter-all($padding: false)");
      parsed.stylesheet.rules[0].declarations.forEach(function(declaration) {
        expect(declaration.property.split('-')[0]).toEqual('margin');
        return expect(declaration.value).toEqual('14px');
      });
      return parsed.stylesheet.rules.slice(1).forEach(function(mq_rule) {
        expect(mq_rule.rules[0].declarations[0].property.split('-')[0]).toEqual('margin');
        return expect(mq_rule.rules[0].declarations[0].value).toEqual('28px');
      });
    });
    return it('should accept alternate sizes', function() {
      var parsed;
      parsed = renderSass(".Foo\n    +gutter-all($values: (1em, 2em))");
      parsed.stylesheet.rules[0].declarations.forEach(function(declaration) {
        expect(declaration.property.split('-')[0]).toEqual('padding');
        return expect(declaration.value).toEqual('1em');
      });
      return parsed.stylesheet.rules.slice(1).forEach(function(mq_rule) {
        expect(mq_rule.rules[0].declarations[0].property.split('-')[0]).toEqual('padding');
        return expect(mq_rule.rules[0].declarations[0].value).toEqual('2em');
      });
    });
  });
});
