#!/usr/bin/env node

var program = require('commander');

program
    .version(require('../package.json').version)
    .option('-p, --production', 'Build for production (minify)')
    .option('-f, --force', 'Force the action, overriding checks and guards')
    .option('-c, --configuration <name>', 'A configuration to use')
    .option('--host <host>', 'Set the development server host, eg 0.0.0.0 for external access (default `localhost`)')
    .option('--port <port>', 'Set the development server port (default `5000`)')
    .option('--api-cache', 'Cache API responses (for development)')
    .option('--verbose', 'Show non-error info messages')
    .option('--deploy-stats <file>', 'Write deploy stats to the given file (JSON formatted)')
    .option('--fake-deploy', 'Run through the deploy process but do not actually upload or delete data [Deprecated, use --fake]')
    .option('--fake', 'Run through the deploy process but do not actually upload or delete data')
    .option('--batch-size <number>', 'Number of simultaneous uploads during deployments (default `5`)')
    .option('--no-delete', 'Skip deleting old remote files')
    .option('--skip-upload-errors', 'Only log errors on deploy upload instead of halting')
    .option('--priority <number>', 'Set compilation priority level')
    .option('--ignore-schedule', 'Ignore schedule on releases (will build all releases)')
    .option('--skip-build-info', 'Do not emit build info to /_build_info/')
    .option('--api-page-size <number>', 'Page size to use when fetching from the API (default `100`)')
    .option('--smart-cache', 'Use modified_date to only fetch content modified since last build')
    .option('--stale-after <number>', 'Consider smart-cache stale after n hours (default `1`)')
    .option('--build-cache', 'Skip emits unchanged since previous build [experimental]')
    .option('--live-reload', 'Start a live reload server for use with a live-reload-compatible browser extension or script tag')
    .option('--inject-live-reload', 'Inject live reload script into React-based emits.')
    .parse(process.argv);

if (program.production) {
    process.env.NODE_ENV = 'production';
} else {
    process.env.NODE_ENV = 'development';
}

if (program.verbose) {
    global.VERBOSE = true;
} else {
    global.VERBOSE = false;
}

var _command = program.args[0];
var _options = {
    force: program.force || false,
    configuration: program.configuration || null,
    production: program.production || false,
    use_cache: program.apiCache || false,
    host: program.host || 'localhost',
    port: program.port || '5000',
    verbose: program.verbose || false,
    deploy_stats: program.deployStats || null,
    fake_deploy: program.fake || program.fakeDeploy || false,
    batch_size: program.batchSize || 5,
    no_delete: program.noDelete || (program.priority !== null && program.priority !== undefined) || program.buildCache || false,
    priority: program.priority || Infinity,
    skip_upload_errors: program.skipUploadErrors || false,
    ignore_schedule: program.ignoreSchedule || false,
    skip_build_info: program.skipBuildInfo || false,
    api_page_size: program.apiPageSize || 100,
    smart_cache: program.smartCache || false,
    stale_after: program.staleAfter || 1,
    build_cache: program.buildCache || false,
    live_reload: program.liveReload || program.injectLiveReload || false,
    inject_live_reload: program.injectLiveReload || false,
}

if (_command !== 'develop' && _command !== 'develop-budo') {
    if (_options.inject_live_reload) {
        throw new Error('--inject-live-reload can only be used for develop command.')
    }
    if (_options.live_reload) {
        throw new Error('--live-reload can only be used for develop command.')
    }
    // Force the compiler to exit if there is an error during asset
    // compilation. Only allow graceful failing during development.
    _options.allow_asset_errors = false
} else {
    _options.allow_asset_errors = true
}

switch (_command) {
    case 'deploy':
        process.env.NODE_ENV = 'production';
        require('../deployment')(process.cwd(), _options);
        break;
    case 'build':
        require('../development/build')(process.cwd(), _options);
        break;
    case 'develop':
        require('../development/develop')(process.cwd(), _options);
        break;
    case 'develop-budo':
        require('../development/develop-budo')(process.cwd(), _options);
        break;
    case 'setup':
        require('../development/setup')(process.cwd(), _options);
        break;
    case 'clearcache:api':
        require('../development/clearcache')(process.cwd(), _options, '.api-cache');
        break;
    case 'clearcache:smart':
        require('../development/clearcache')(process.cwd(), _options, '.smart-cache');
        break;
    case 'clearcache:build':
        require('../development/clearcache')(process.cwd(), _options, '.build-cache');
        break;
    case 'clearcache:asset':
        require('../development/clearcache')(process.cwd(), _options, '.asset-cache');
        break;
    case 'clearcache':
        require('../development/clearcache')(process.cwd(), _options);
        break;
    default:
        if(_command) {
            console.log('Unknown command: `' + _command + '`');
        } else {
            console.log('No command given.');
        }
        console.log('You must specify a command, `proof <command>`. See `proof --help`.')
        process.exit(1);
}
